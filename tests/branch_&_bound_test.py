# -*- coding: utf-8 -*-
"""Branch & Bound-test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YyJ5_i24SiYx8CEkabOZOazYN3yPeewR
"""

import unittest

class TestBranchAndBound(unittest.TestCase):
    def test_branch_and_bound(self):
        seqs = ["ACGTG", "ACGTT", "ACGTC"]
        num_seqs = 3
        tam_motif = 3
        melhor_pos, melhor_score = branch_and_bound(seqs, num_seqs, tam_motif)

        self.assertIsInstance(melhor_pos, list)
        self.assertIsInstance(melhor_score, int)
        self.assertGreaterEqual(melhor_score, 0)

    def test_branch_and_bound_single_sequence(self):
        seqs = ["ACGTG"]
        num_seqs = 1
        tam_motif = 3
        melhor_pos, melhor_score = branch_and_bound(seqs, num_seqs, tam_motif)

        self.assertIsInstance(melhor_pos, list)
        self.assertIsInstance(melhor_score, int)
        self.assertGreaterEqual(melhor_score, 0)

    def test_branch_and_bound_identical_sequences(self):
        seqs = ["AAAAA", "AAAAA", "AAAAA"]
        num_seqs = 3
        tam_motif = 3
        melhor_pos, melhor_score = branch_and_bound(seqs, num_seqs, tam_motif)

        self.assertEqual(melhor_score, 9)  # Todas as colunas ter√£o o mesmo caractere

    def test_empty_sequences(self):
        seqs = []
        num_seqs = 0
        tam_motif = 3
        melhor_pos, melhor_score = branch_and_bound(seqs, num_seqs, tam_motif)
        self.assertIsNone(melhor_pos)
        self.assertEqual(melhor_score, 0)

    def test_different_sequence_lengths(self):
        seqs = ["ACGT", "ACGTTG", "AC"]
        with self.assertRaises(ValueError):
            branch_and_bound(seqs, len(seqs), 3)

    def test_motif_longer_than_sequence(self):
        seqs = ["ACGT", "TGCA", "GATT"]
        num_seqs = len(seqs)
        tam_motif = 10
        with self.assertRaises(ValueError):
            branch_and_bound(seqs, num_seqs, tam_motif)

    def test_motif_equal_to_sequence_length(self):
        seqs = ["ACGT", "TGCA", "GATT"]
        num_seqs = len(seqs)
        tam_motif = 4
        melhor_pos, melhor_score = branch_and_bound(seqs, num_seqs, tam_motif)
        print(f"Expected Score: 8, Actual Score: {melhor_score}, Motif Positions: {melhor_pos}")
        self.assertEqual(melhor_score, 5)

    def test_protein_sequences(self):
        seqs = ["MKVAVL", "MKVAVM", "MKVAVV"]
        num_seqs = len(seqs)
        tam_motif = 3
        melhor_pos, melhor_score = branch_and_bound(seqs, num_seqs, tam_motif)
        self.assertGreaterEqual(melhor_score, 0)

if __name__ == "__main__":
    unittest.main(argv=['first-arg-is-ignored'], exit=False)