# -*- coding: utf-8 -*-
"""redes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ImM1QPe4NZCtkCmsG6B_6RQu0sgLKf3V
"""

# --- Metabolic Network Class ---
class MetabolicNetwork(MyGraph):
    def __init__(self, network_type="metabolite-reaction", split_rev=False):
        super().__init__({})
        self.net_type = network_type
        self.split_rev = split_rev
        self.node_types = {"metabolite": [], "reaction": []}

    def add_vertex_type(self, v, nodetype):
        self.add_vertex(v)
        if v not in self.node_types[nodetype]:
            self.node_types[nodetype].append(v)

    def get_nodes_type(self, node_type):
        return self.node_types[node_type]

    def load_from_file(self, filename):
        with open(filename) as f:
            temp = MetabolicNetwork("metabolite-reaction", self.split_rev)
            for line in f:
                if ":" not in line:
                    continue
                reac_id, rline = map(str.strip, line.split(":", 1))
                temp.add_vertex_type(reac_id, "reaction")
                if "<=>" in rline:
                    left, right = map(str.strip, rline.split("<=>"))
                elif "=>" in rline:
                    left, right = map(str.strip, rline.split("=>"))
                else:
                    continue
                for met in map(str.strip, left.split("+")):
                    temp.add_vertex_type(met, "metabolite")
                    temp.add_edge(met, reac_id)
                for met in map(str.strip, right.split("+")):
                    temp.add_vertex_type(met, "metabolite")
                    temp.add_edge(reac_id, met)
            if self.net_type == "metabolite-reaction":
                self.graph = temp.graph
                self.node_types = temp.node_types
            elif self.net_type == "metabolite-metabolite":
                self.convert_metabolite_net(temp)
            elif self.net_type == "reaction-reaction":
                self.convert_reaction_graph(temp)

    def convert_metabolite_net(self, gmr):
        for m in gmr.node_types["metabolite"]:
            self.add_vertex(m)
            for r in gmr.get_successors(m):
                for m2 in gmr.get_successors(r):
                    if m != m2:
                        self.add_edge(m, m2)

    def convert_reaction_graph(self, gmr):
        for r in gmr.node_types["reaction"]:
            self.add_vertex(r)
            for m in gmr.get_successors(r):
                for r2 in gmr.get_predecessors(m):
                    if r != r2:
                        self.add_edge(r, r2)

# --- Solve the exercise 1---
def solve_exercise():
    print("Análise da rede de metabolitos da E. coli")
    net = MetabolicNetwork("metabolite-metabolite")
    net.load_from_file("ecoli.txt")

    print(f"\n Grau médio <k>: {net.mean_degree():.2f}")
    print("Top 5 nós com maior grau:")
    for node, val in net.highest_degrees(top=10):
        print(f"  {node}: grau = {val}")

    print(f"\n Coeficiente médio de clustering <C>: {net.mean_clustering_coef():.2f}")
    clustering = net.all_clustering_coefs()
    top_cluster = sorted(clustering.items(), key=lambda x: x[1], reverse=True)[:50]
    print("Top 5 nós com maior clustering:")
    for node, coef in top_cluster:
        print(f"  {node}: C = {coef:.2f}")

    l_mean, reach_frac = net.mean_distances()
    print(f"\n Comprimento médio dos caminhos mais curtos <L>: {l_mean:.2f}")
    print(f"Fração de pares alcançáveis: {reach_frac:.2%}")

# Run the analysis
if __name__ == "__main__":
    solve_exercise()

# --- Solve the exercise 2---
def active_reactions(net, available_metabolites):
    active = []
    for r in net.get_nodes_type("reaction"):
        preds = net.get_predecessors(r)
        if all(m in available_metabolites for m in preds):
            active.append(r)
    return active

def products_from_reactions(net, active_reacs):
    products = set()
    for r in active_reacs:
        for m in net.get_successors(r):
            products.add(m)
    return products

def compute_reachable_metabolites(net, initial_metabolites):
    known_mets = set(initial_metabolites)
    while True:
        actives = active_reactions(net, known_mets)
        new_mets = products_from_reactions(net, actives)
        new_added = new_mets - known_mets
        if not new_added:
            break
        known_mets.update(new_added)
    return known_mets

def test_potential_metabolic_capacity():
    mrn = MetabolicNetwork("metabolite-reaction", split_rev=True)
    mrn.load_from_file("ecoli.txt")

    initial = mrn.get_nodes_type("metabolite")[:10]
    final_metabolites = compute_reachable_metabolites(mrn, initial)

    print(f"\nA partir dos metabolitos iniciais {initial}, podem ser produzidos {len(final_metabolites)} metabolitos:")
    for m in sorted(final_metabolites):
        print(f" - {m}")

if __name__ == "__main__":
    test_potential_metabolic_capacity()