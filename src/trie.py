# -*- coding: utf-8 -*-
"""Trie.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UmsLkdbGqan4g_wVeGrVHvkfIv7mKH6T
"""

class Trie:
    def __init__(self):
        self.nodes = {0: {}}  # Root node initialized (node ID 0)
        self.num = 0          # Tracks the current max node ID

    def add_node(self, origin, symbol):
        # Adds a new node connected by 'symbol' from 'origin'
        self.num += 1
        self.nodes[origin][symbol] = self.num
        self.nodes[self.num] = {}

    def add_pattern(self, p):
        # Inserts a single pattern into the trie
        pos = 0
        node = 0  # Start at the root
        while pos < len(p):
            if p[pos] not in self.nodes[node]:
                self.add_node(node, p[pos])  # Add a new edge if symbol not found
            node = self.nodes[node][p[pos]]  # Move to the next node
            pos += 1

    def trie_from_patterns(self, patterns):
        # Builds trie from a list of patterns
        for p in patterns:
            self.add_pattern(p)

    def prefix_trie_match(self, text):
        # Returns the longest prefix match from the text that is a pattern in the trie
        pos = 0
        match = ""
        node = 0
        while pos < len(text):
            if text[pos] in self.nodes[node]:
                node = self.nodes[node][text[pos]]
                match += text[pos]
                if self.nodes[node] == {}:  # Leaf node = end of a pattern
                    return match
                else:
                    pos += 1
            else:
                return None  # No match at this branch
        return None  # Reached end of text with no complete match

    def trie_matches(self, text):
        # Finds all prefix matches starting at each position in the text
        res = []
        for i in range(len(text)):
            m = self.prefix_trie_match(text[i:])
            if m:
                res.append((i, m))
        return res

    def print_trie(self):
        # Prints the internal trie structure (for debugging)
        for node in self.nodes:
            print(node, "->", self.nodes[node])